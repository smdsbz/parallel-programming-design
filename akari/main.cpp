#include <iostream>
#include <vector>
#include "akari.h"
using namespace std;


typedef vector<vector<int> > GameMap;

int main(const int argc, const char **argv)
{
    // GameMap input_map{
    //     {-2, -2, -1,  1, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2,  1},
    //     { 0, -2, -2, -2, -2, -2,  1},
    //     { 2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2,  1, -1, -2, -2}
    // };

    // GameMap input_map{
    //     {-2, -2, -2, -2, -1, -2 ,-2},
    //     {-2,  2, -2, -2, -2,  4 ,-2},
    //     {-1, -2, -2, -1, -2, -2 ,-2},
    //     {-2, -2,  2, -1,  1, -2 ,-2},
    //     {-2, -2, -2, -1, -2, -2 , 1},
    //     {-2,  2, -2, -2, -2, -1 ,-2},
    //     {-2, -2,  2, -2, -2, -2 ,-2}
    // };

    // GameMap input_map{
    //     {-2,  1, -2, -2, -2, -2, -2},
    //     {-2, -2,  3, -2, -2, -2,  0},
    //     {-2, -2, -2, -2, -2,  1, -2},
    //     {-2, -2, -2, -1, -2, -2, -2},
    //     {-2,  1, -2, -2, -2, -2, -2},
    //     { 0, -2, -2, -2,  2, -2, -2},
    //     {-2, -2, -2, -2, -2,  0, -2},
    // };

    // // 7x7 hard
    // GameMap input_map{
    //     {-2, -2, -1,  2, -2, -1, -2},
    //     { 2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -1},
    //     { 1, -2, -2, -2, -2, -2,  0},
    //     { 0, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -1},
    //     {-2, -1, -2,  0,  0, -2, -2}
    // };

    // // 10x10 hard
    // GameMap input_map{
    //     {-2,  2, -2, -2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2, -2, -2,  1, -2,  2, -2, -2, -1},
    //     {-2, -2, -2, -1,  0, -2, -2, -2, -2, -2},
    //     {-2, -1, -2,  1, -2, -2,  2,  1, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -2,  1,  2, -2},
    //     {-2, -1, -1, -2, -2, -2, -2, -2, -2, -2},
    //     {-2, -2,  1, -1, -2, -2,  1, -2,  3, -2},
    //     {-2, -2, -2, -2, -2,  1, -1, -2, -2, -2},
    //     { 1, -2, -2,  1, -2,  0, -2, -2, -2, -2},
    //     {-2, -2, -2, -2, -2, -2, -2, -2,  1, -2}
    // };

    // // 14x14 easy
    // GameMap input_map{
    //     {-2, -2, -2, -2, -2, -2, -2, -2,  1, -2, -1,  1, -2, -2},
    //     {-2, -2, -2, -2, -2,  3, -1, -2, -2, -2,  1, -2, -2, -2},
    //     {-1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2},
    //     {-1,  3, -2, -1, -2, -2, -2,  2, -2, -2, -1,  0, -2, -2},
    //     {-2, -2, -2, -2, -1, -2, -2, -1, -2,  1, -2, -2, -2, -2},
    //     {-1, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2},
    //     {-2, -2, -2, -1,  2, -1, -2, -2, -2, -2, -2, -2,  1, -2},
    //     {-2,  1, -2, -2, -2, -2, -2, -2,  0,  0, -1, -2, -2, -2},
    //     {-2, -1, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -1},
    //     {-2, -2, -2, -2, -1, -2,  0, -2, -2, -1, -2, -2, -2, -2},
    //     {-2, -2, -1, -1, -2, -2,  1, -2, -2, -2,  2, -2, -1, -1},
    //     {-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1},
    //     {-2, -2, -2,  0, -2, -2, -2, -1,  2, -2, -2, -2, -2, -2},
    //     {-2, -2,  1, -1, -2,  0, -2, -2, -2, -2, -2, -2, -2, -2}
    // };

    // 14x14 hard
    GameMap input_map{
        {-2, -2, -1, -2, -1, -1, -2,  1, -2, -2,  2, -2,  1, -2},
        { 2, -2, -2, -2, -2,  0, -2, -2, -2, -2, -2,  2, -2, -2},
        {-2,  2, -2, -2, -2, -2, -2,  0, -2, -1, -2, -2, -2, -1},
        {-1, -2, -2, -2,  2, -2, -1, -2, -2, -2, -2, -2, -2, -2},
        {-2, -2, -1, -2, -2, -2, -2, -2, -2, -2,  1, -2, -2, -1},
        {-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,  0, -1},
        { 2, -2,  1, -2, -2, -2, -2, -2, -2, -2,  0, -2, -2, -2},
        {-2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2,  0, -2,  2},
        {-1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2},
        {-1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2},
        {-2, -2, -2, -2, -2, -2, -2,  2, -2,  0, -2, -2, -2, -1},
        {-1, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2, -2,  1, -2},
        {-2, -2,  2, -2, -2, -2, -2, -2,  0, -2, -2, -2, -2,  2},
        {-2,  1, -2,  1, -2, -2, -1, -2,  1, -1, -2, -1, -2, -2}
    };

    // const int repeat = 25;
    // const int progwidth = 40;
    // std::cout << "Solving Akari x " << repeat << " ..." << std::endl;
    // for (int i = 0; i != repeat; ++i) {
    //     std::cout << "[";
    //     for (int j = 0; j != progwidth; ++j) {
    //         if (j < i * progwidth / repeat) { std::cout << "="; }
    //         else if (j == i * progwidth / repeat) { std::cout << ">"; }
    //         else { std::cout << " "; }
    //     }
    //     std::printf("] %.2f%%\r", (double)i / (double)repeat * 100.0);
    //     std::cout.flush();
    //     aka::solveAkari(input_map);
    // }
    // for (int i = -10; i != progwidth; ++i) {
    //     std::printf(" ");
    // }
    // std::cout << "\rDone" << std::endl;

    std::cout << "Solving Akari..." << std::endl;
    aka::printMap(aka::solveAkari(input_map));

    return 0;
}
